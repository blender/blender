/*
 * Copyright 2011-2013 Blender Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "stdosl.h"
#include "node_texture.h"

/* Voronoi */

shader node_voronoi_texture(
	int use_mapping = 0,
	matrix mapping = matrix(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
	string coloring = "intensity",
	float Scale = 5.0,
	point Vector = P,
	output float Fac = 0.0,
	output color Color = 0.0)
{
	point p = Vector;

	if (use_mapping)
		p = transform(mapping, p);

	/* compute distance and point coordinate of 4 nearest neighbours */
	float da[4];
	point pa[4];

	voronoi(p * Scale, 1.0, da, pa);

	/* Colored output */
	if (coloring == "intensity") {
		Fac = fabs(da[0]);
		Color = color(Fac);
	}
	else {
		Color = cellnoise_color(pa[0]);
		Fac = (Color[0] + Color[1] + Color[2]) * (1.0 / 3.0);

	}
}

