/*
 * Copyright 2011-2013 Blender Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "stdosl.h"
#include "node_texture.h"

/* Checker */

float checker(point p)
{
	p[0] = (p[0] + 0.000001) * 0.999999;
	p[1] = (p[1] + 0.000001) * 0.999999;
	p[2] = (p[2] + 0.000001) * 0.999999;
	
	int xi = (int)fabs(floor(p[0]));
	int yi = (int)fabs(floor(p[1]));
	int zi = (int)fabs(floor(p[2]));

	if ((xi % 2 == yi % 2) == (zi % 2)) {
		return 1.0;
	}
	else {
		return 0.0;
	}
}

shader node_checker_texture(
	int use_mapping = 0,
	matrix mapping = matrix(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
	float Scale = 5.0,
	point Vector = P,
	color Color1 = 0.8,
	color Color2 = 0.2,
	output float Fac = 0.0,
	output color Color = 0.0)
{
	point p = Vector;

	if (use_mapping)
		p = transform(mapping, p);

	Fac = checker(p * Scale);
	if (Fac == 1.0) {
		Color = Color1;
	}
	else {
		Color = Color2;
	}
}

