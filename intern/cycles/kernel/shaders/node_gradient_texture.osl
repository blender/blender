/*
 * Copyright 2011-2013 Blender Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "stdosl.h"
#include "node_texture.h"

/* Gradient */

float gradient(point p, string type)
{
	float x, y, z;
	
	x = p[0];
	y = p[1];
	z = p[2];

	float result = 0.0;

	if (type == "linear") {
		result = x;
	}
	else if (type == "quadratic") {
		float r = max(x, 0.0);
		result = r * r;
	}
	else if (type == "easing") {
		float r = min(max(x, 0.0), 1.0);
		float t = r * r;
		
		result = (3.0 * t - 2.0 * t * r);
	}
	else if (type == "diagonal") {
		result = (x + y) * 0.5;
	}
	else if (type == "radial") {
		result = atan2(y, x) / M_2PI + 0.5;
	}
	else {
		float r = max(1.0 - sqrt(x * x + y * y + z * z), 0.0);

		if (type == "quadratic_sphere")
			result = r * r;
		else if (type == "spherical")
			result = r;
	}

	return result;
}

shader node_gradient_texture(
	int use_mapping = 0,
	matrix mapping = matrix(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
	string type = "linear",
	point Vector = P,
	output float Fac = 0.0,
	output color Color = 0.0)
{
	point p = Vector;

	if (use_mapping)
		p = transform(mapping, p);

	Fac = gradient(p, type);
	Color = color(Fac, Fac, Fac);
}

